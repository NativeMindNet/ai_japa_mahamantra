import 'dart:io';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/mahabharata_comic.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∏–∫—Å–∞–º–∏ –ú–∞—Ö–∞–±—Ö–∞—Ä–∞—Ç—ã
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã .comics –∏ .boranko (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
class MahabharataService {
  static MahabharataService? _instance;
  
  bool _isInitialized = false;
  List<MahabharataComic> _comics = [];
  Map<String, MahabharataComic> _comicsById = {};
  MahabharataComicCollection? _collection;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  int _totalRead = 0;
  int _totalFavorites = 0;
  Map<String, double> _readProgress = {};
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  static const String _prefKeyReadProgress = 'mahabharata_read_progress';
  static const String _prefKeyFavorites = 'mahabharata_favorites';
  static const String _prefKeyTotalRead = 'mahabharata_total_read';
  
  // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
  static const String _assetsPath = 'assets/comics/';
  static const String _comicsExtension = '.comics';
  static const String _borankoExtension = '.boranko';

  MahabharataService._();

  /// –ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
  static MahabharataService get instance {
    _instance ??= MahabharataService._();
    return _instance!;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<bool> initialize() async {
    if (_isInitialized) return true;
    
    try {
      debugPrint('üïâÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MahabharataService...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      await _loadSettings();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∏–∫—Å—ã –∏–∑ assets
      await _loadComicsFromAssets();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∏–∫—Å—ã –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      await _loadComicsFromExternalSources();
      
      _isInitialized = true;
      debugPrint('‚úÖ MahabharataService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–∏–∫—Å–æ–≤: ${_comics.length}');
      
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MahabharataService: $e');
      return false;
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ SharedPreferences
  Future<void> _loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
      final progressJson = prefs.getString(_prefKeyReadProgress);
      if (progressJson != null) {
        final progressMap = jsonDecode(progressJson) as Map<String, dynamic>;
        _readProgress = progressMap.map((key, value) => MapEntry(key, value as double));
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      final favoritesJson = prefs.getString(_prefKeyFavorites);
      if (favoritesJson != null) {
        final favoritesList = jsonDecode(favoritesJson) as List;
        _totalFavorites = favoritesList.length;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      _totalRead = prefs.getInt(_prefKeyTotalRead) ?? 0;
      
      debugPrint('‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: –ø—Ä–æ–≥—Ä–µ—Å—Å=${_readProgress.length}, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ=$_totalFavorites, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ=$_totalRead');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ SharedPreferences
  Future<void> _saveSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
      await prefs.setString(_prefKeyReadProgress, jsonEncode(_readProgress));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      final favorites = _comics.where((c) => c.isFavorite).map((c) => c.id).toList();
      await prefs.setString(_prefKeyFavorites, jsonEncode(favorites));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await prefs.setInt(_prefKeyTotalRead, _totalRead);
      
      debugPrint('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–∏–∫—Å—ã –∏–∑ assets
  Future<void> _loadComicsFromAssets() async {
    try {
      debugPrint('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∏–∫—Å–æ–≤ –∏–∑ assets...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      try {
        final collectionData = await rootBundle.loadString('${_assetsPath}mahabharata_collection.comics');
        final collectionJson = jsonDecode(collectionData) as Map<String, dynamic>;
        _collection = MahabharataComicCollection.fromJson(collectionJson);
        
        _comics.addAll(_collection!.comics);
        debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: ${_collection!.name} (${_collection!.comics.length} –∫–æ–º–∏–∫—Å–æ–≤)');
      } catch (e) {
        debugPrint('‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ assets: $e');
      }
      
      // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫–æ–º–∏–∫—Å—ã –ø–æ ID
      for (var comic in _comics) {
        _comicsById[comic.id] = comic;
      }
      
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ assets: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–∏–∫—Å—ã –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (Documents, Downloads)
  Future<void> _loadComicsFromExternalSources() async {
    try {
      debugPrint('üìÇ –ü–æ–∏—Å–∫ –∫–æ–º–∏–∫—Å–æ–≤ –≤ Documents –∏ Downloads...');
      
      final documentsDir = await getApplicationDocumentsDirectory();
      final comicsDir = Directory('${documentsDir.path}/comics');
      
      if (await comicsDir.exists()) {
        final files = comicsDir.listSync();
        
        for (var file in files) {
          if (file is File) {
            final fileName = file.path.split('/').last;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            if (fileName.endsWith(_comicsExtension) || fileName.endsWith(_borankoExtension)) {
              try {
                await _loadComicFromFile(file);
              } catch (e) {
                debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ $fileName: $e');
              }
            }
          }
        }
      }
      
      debugPrint('‚úÖ –í–Ω–µ—à–Ω–∏–µ –∫–æ–º–∏–∫—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∏–∫—Å–æ–≤: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–∏–∫—Å –∏–∑ —Ñ–∞–π–ª–∞
  Future<void> _loadComicFromFile(File file) async {
    try {
      final content = await file.readAsString();
      final json = jsonDecode(content) as Map<String, dynamic>;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
      if (json.containsKey('comics')) {
        // –§–æ—Ä–º–∞—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        final collection = MahabharataComicCollection.fromJson(json);
        _comics.addAll(collection.comics);
        debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞: ${collection.name}');
      } else {
        // –§–æ—Ä–º–∞—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–æ–º–∏–∫—Å–∞
        final comic = MahabharataComic.fromJson(json);
        _comics.add(comic);
        _comicsById[comic.id] = comic;
        debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–º–∏–∫—Å: ${comic.title}');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–∏–∫—Å—ã
  List<MahabharataComic> getAllComics() {
    return List.unmodifiable(_comics);
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏–∫—Å –ø–æ ID
  MahabharataComic? getComicById(String id) {
    return _comicsById[id];
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏–∫—Å—ã –ø–æ —Ç–µ–≥–∞–º
  List<MahabharataComic> getComicsByTags(List<String> tags) {
    return _comics.where((comic) {
      return tags.any((tag) => comic.tags.contains(tag));
    }).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏–∫—Å—ã –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
  List<MahabharataComic> getComicsByCharacters(List<String> characters) {
    return _comics.where((comic) {
      return characters.any((char) => comic.characters.contains(char));
    }).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏–∫—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –±—É—Å–∏–Ω–æ–π/–∫—Ä—É–≥–æ–º
  List<MahabharataComic> getComicsByJapaConnection({
    int? beadNumber,
    int? roundNumber,
  }) {
    return _comics.where((comic) {
      if (comic.japaConnection == null) return false;
      
      if (beadNumber != null && comic.japaConnection!.beadNumber == beadNumber) {
        return true;
      }
      
      if (roundNumber != null && comic.japaConnection!.roundNumber == roundNumber) {
        return true;
      }
      
      return false;
    }).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏–∫—Å—ã-–Ω–∞–≥—Ä–∞–¥—ã (—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä—É–≥–æ–≤)
  List<MahabharataComic> getRewardComics(int completedRounds) {
    return _comics.where((comic) {
      if (comic.japaConnection == null) return false;
      
      return comic.japaConnection!.showAsReward &&
          completedRounds >= comic.japaConnection!.minRoundsToUnlock;
    }).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å—ã
  List<MahabharataComic> getFavoriteComics() {
    return _comics.where((comic) => comic.isFavorite).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏–∫—Å—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É —ç–ø–∏–∑–æ–¥–∞
  List<MahabharataComic> getComicsSortedByEpisode() {
    final sorted = List<MahabharataComic>.from(_comics);
    sorted.sort((a, b) => a.episodeNumber.compareTo(b.episodeNumber));
    return sorted;
  }

  /// –û—Ç–º–µ—á–∞–µ—Ç –∫–æ–º–∏–∫—Å –∫–∞–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã–π/–Ω–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–π
  Future<void> toggleFavorite(String comicId) async {
    final comic = _comicsById[comicId];
    if (comic == null) return;
    
    final updatedComic = comic.copyWith(isFavorite: !comic.isFavorite);
    _comicsById[comicId] = updatedComic;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ
    final index = _comics.indexWhere((c) => c.id == comicId);
    if (index != -1) {
      _comics[index] = updatedComic;
    }
    
    _totalFavorites = _comics.where((c) => c.isFavorite).length;
    
    await _saveSettings();
    debugPrint('${updatedComic.isFavorite ? "‚ù§Ô∏è" : "ü§ç"} –ö–æ–º–∏–∫—Å ${comic.title} ${updatedComic.isFavorite ? "–¥–æ–±–∞–≤–ª–µ–Ω –≤" : "—É–¥–∞–ª–µ–Ω –∏–∑"} –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è –∫–æ–º–∏–∫—Å–∞
  Future<void> updateReadProgress(String comicId, double progress) async {
    if (progress < 0.0 || progress > 1.0) {
      debugPrint('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: $progress');
      return;
    }
    
    _readProgress[comicId] = progress;
    
    if (progress >= 1.0) {
      _totalRead++;
      debugPrint('‚úÖ –ö–æ–º–∏–∫—Å $comicId –ø—Ä–æ—á–∏—Ç–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
    }
    
    await _saveSettings();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è –∫–æ–º–∏–∫—Å–∞
  double getReadProgress(String comicId) {
    return _readProgress[comicId] ?? 0.0;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  Map<String, dynamic> getStatistics() {
    return {
      'total_comics': _comics.length,
      'total_read': _totalRead,
      'total_favorites': _totalFavorites,
      'read_percentage': _comics.isNotEmpty
          ? (_totalRead / _comics.length * 100).round()
          : 0,
      'collection_name': _collection?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è',
      'is_initialized': _isInitialized,
    };
  }

  /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∏–∫—Å –≤ —Ñ–∞–π–ª
  Future<String?> exportComic(String comicId, {String? directory}) async {
    try {
      final comic = _comicsById[comicId];
      if (comic == null) {
        debugPrint('‚ùå –ö–æ–º–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: $comicId');
        return null;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      final dir = directory ?? (await getApplicationDocumentsDirectory()).path;
      final fileName = '${comic.id}$_comicsExtension';
      final filePath = '$dir/$fileName';
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
      final file = File(filePath);
      await file.writeAsString(jsonEncode(comic.toJson()));
      
      debugPrint('üíæ –ö–æ–º–∏–∫—Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: $filePath');
      return filePath;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–º–∏–∫—Å–∞: $e');
      return null;
    }
  }

  /// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∏–∫—Å –∏–∑ —Ñ–∞–π–ª–∞
  Future<bool> importComic(String filePath) async {
    try {
      final file = File(filePath);
      if (!await file.exists()) {
        debugPrint('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $filePath');
        return false;
      }
      
      await _loadComicFromFile(file);
      debugPrint('‚úÖ –ö–æ–º–∏–∫—Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: $filePath');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–∏–∫—Å–∞: $e');
      return false;
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–∏–∫—Å—ã
  Future<void> reload() async {
    debugPrint('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∏–∫—Å–æ–≤...');
    
    _comics.clear();
    _comicsById.clear();
    _collection = null;
    _isInitialized = false;
    
    await initialize();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
  bool get isAvailable => _isInitialized && _comics.isNotEmpty;
  
  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤
  int get totalComics => _comics.length;
  
  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é
  MahabharataComicCollection? get collection => _collection;
}

