import 'dart:convert';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_settings_ui/flutter_settings_ui.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:vibration/vibration.dart';
import '../providers/japa_provider.dart';
import '../providers/locale_provider.dart';
import '../providers/profile_provider.dart';
import '../services/ai_service.dart';
import '../services/notification_service.dart';
import '../services/audio_service.dart';
import '../services/magento_service.dart';
import '../services/connectivity_service.dart';
import '../services/charging_chanting_service.dart';
import '../constants/app_constants.dart';
import '../screens/profile_screen.dart';
import '../screens/easter_egg_logs_screen.dart';
// import '../l10n/app_localizations_delegate.dart'; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
import '../utils/simple_localizations.dart';
import '../animations/custom_page_transitions.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  bool _isLoading = false;
  bool _cloudFeaturesEnabled = false;
  bool _isOnline = false;

  // Easter Egg: –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤–µ—Ä—Å–∏—é
  int _versionTapCount = 0;
  bool _developerModeEnabled = false;
  Timer? _versionTapTimer;
  static const int _requiredTaps = 7; // –ö–∞–∫ –≤ Android
  static const Duration _tapTimeout = Duration(seconds: 3);

  final MagentoService _magentoService = MagentoService();
  final ConnectivityService _connectivityService = ConnectivityService();

  @override
  void initState() {
    super.initState();
    _loadCloudSettings();
    _initConnectivity();
    _loadDeveloperMode();
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
  Future<void> _loadDeveloperMode() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _developerModeEnabled = prefs.getBool('developer_mode_enabled') ?? false;
    });
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
  Future<void> _saveDeveloperMode(bool enabled) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('developer_mode_enabled', enabled);
    setState(() {
      _developerModeEnabled = enabled;
    });
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  Future<void> _loadCloudSettings() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _cloudFeaturesEnabled = prefs.getBool('cloud_features_enabled') ?? false;
    });
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  Future<void> _initConnectivity() async {
    await _connectivityService.initialize();
    setState(() {
      _isOnline = _connectivityService.isOnline;
    });

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    _connectivityService.connectivityStream.listen((isOnline) {
      if (mounted) {
        setState(() {
          _isOnline = isOnline;
        });
      }
    });
  }

  @override
  void dispose() {
    _connectivityService.dispose();
    _versionTapTimer?.cancel();
    super.dispose();
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤–µ—Ä—Å–∏—é (Easter Egg)
  void _handleVersionTap() {
    if (_developerModeEnabled) {
      // –£–∂–µ –≤–∫–ª—é—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('üîì –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'),
          duration: Duration(seconds: 1),
        ),
      );
      return;
    }

    setState(() {
      _versionTapCount++;
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
    _versionTapTimer?.cancel();
    _versionTapTimer = Timer(_tapTimeout, () {
      if (mounted) {
        setState(() {
          _versionTapCount = 0;
        });
      }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    final remaining = _requiredTaps - _versionTapCount;
    if (remaining > 0 && remaining <= 3) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'üîê –ï—â–µ $remaining ${_pluralTaps(remaining)} –¥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
          ),
          duration: const Duration(milliseconds: 800),
        ),
      );
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if (_versionTapCount >= _requiredTaps) {
      _activateDeveloperMode();
    }
  }

  /// –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–Ω–∞–∂–∞—Ç–∏–µ"
  String _pluralTaps(int count) {
    if (count == 1) return '–Ω–∞–∂–∞—Ç–∏–µ';
    if (count >= 2 && count <= 4) return '–Ω–∞–∂–∞—Ç–∏—è';
    return '–Ω–∞–∂–∞—Ç–∏–π';
  }

  /// –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
  void _activateDeveloperMode() {
    _saveDeveloperMode(true);
    _versionTapCount = 0;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text(
          'üéâ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤.',
        ),
        duration: Duration(seconds: 3),
        backgroundColor: Colors.green,
      ),
    );

    // –í–∏–±—Ä–∞—Ü–∏—è
    if (Vibration.hasVibrator() != null) {
      Vibration.vibrate(duration: 200);
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = SimpleLocalizations();
    final localeProvider = Provider.of<LocaleProvider>(context);

    return Scaffold(
      backgroundColor: Theme.of(context).colorScheme.surface,
      appBar: AppBar(
        title: Text(
          l10n.settings,
          style: const TextStyle(
            fontFamily: 'Sanskrit',
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Theme.of(context).colorScheme.onPrimary,
        elevation: 0,
      ),
      body: Consumer<JapaProvider>(
        builder: (context, japaProvider, child) {
          return Stack(
            children: [
              Container(
                color: Theme.of(context).colorScheme.surface,
                child: SettingsList(
                  sections: [
                    // –í—ã–±–æ—Ä —è–∑—ã–∫–∞
                    SettingsSection(
                      title: l10n.language,
                      tiles: [
                        SettingsTile(
                          title: l10n.selectLanguage,
                          subtitle: _getCurrentLanguageName(localeProvider),
                          leading: const Icon(Icons.language),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showLanguageSelectionDialog(localeProvider);
                          },
                        ),
                      ],
                    ),

                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
                    SettingsSection(
                      title: l10n.theme,
                      tiles: [
                        SettingsTile.switchTile(
                          title: l10n.darkTheme,
                          subtitle: l10n.themeDescription,
                          leading: const Icon(Icons.dark_mode),
                          switchValue: localeProvider.isDarkTheme,
                          onToggle: (value) {
                            localeProvider.toggleTheme();
                          },
                        ),
                      ],
                    ),

                    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∂–∞–ø—ã
                    SettingsSection(
                      title: l10n.basicSettings,
                      tiles: [
                        SettingsTile(
                          title: l10n.targetRounds,
                          subtitle:
                              '${japaProvider.targetRounds} ${l10n.rounds}',
                          leading: const Icon(Icons.track_changes),
                          trailing: DropdownButton<int>(
                            value: japaProvider.targetRounds,
                            items: AppConstants.recommendedRounds.map((rounds) {
                              return DropdownMenuItem(
                                value: rounds,
                                child: Text('$rounds'),
                              );
                            }).toList(),
                            onChanged: (value) {
                              if (value != null) {
                                japaProvider.setTargetRounds(value);
                              }
                            },
                          ),
                        ),
                        SettingsTile(
                          title: l10n.timePerRound,
                          subtitle:
                              '${AppConstants.minutesPerRound} ${l10n.minutes}',
                          leading: const Icon(Icons.timer),
                          trailing: const Text('–ü—Ä–∏–º–µ—Ä–Ω–æ'),
                        ),
                        SettingsTile(
                          title: l10n.maxRoundsPerDay,
                          subtitle:
                              '${AppConstants.maxRoundsPerDay} ${l10n.rounds}',
                          leading: const Icon(Icons.warning),
                          trailing: Text(l10n.notRecommendedToExceed),
                        ),
                      ],
                    ),

                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    SettingsSection(
                      title: l10n.notificationsAndReminders,
                      tiles: [
                        SettingsTile.switchTile(
                          title: l10n.notifications,
                          subtitle: l10n.japaProgressNotifications,
                          leading: const Icon(Icons.notifications),
                          switchValue: japaProvider.notificationsEnabled,
                          onToggle: (value) {
                            japaProvider.setNotificationsEnabled(value);
                          },
                        ),
                        SettingsTile.switchTile(
                          title: l10n.autoStart,
                          subtitle: l10n.japaTimeReminders,
                          leading: const Icon(Icons.schedule),
                          switchValue: japaProvider.autoStartEnabled,
                          onToggle: (value) {
                            japaProvider.setAutoStartEnabled(value);
                          },
                        ),
                        SettingsTile(
                          title: l10n.dailyReminder,
                          subtitle: l10n.setJapaTime,
                          leading: const Icon(Icons.access_time),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showDailyReminderDialog(l10n);
                          },
                        ),
                        SettingsTile(
                          title: l10n.japaSchedule,
                          subtitle: l10n.setMultipleTimes,
                          leading: const Icon(Icons.calendar_today),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showScheduleDialog(l10n);
                          },
                        ),
                      ],
                    ),

                    // –ó–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—è
                    SettingsSection(
                      title: l10n.soundAndVibration,
                      tiles: [
                        SettingsTile.switchTile(
                          title: l10n.vibration,
                          subtitle: l10n.beadClickVibration,
                          leading: const Icon(Icons.vibration),
                          switchValue: japaProvider.vibrationEnabled,
                          onToggle: (value) {
                            japaProvider.setVibrationEnabled(value);
                          },
                        ),
                        SettingsTile.switchTile(
                          title: l10n.sound,
                          subtitle: l10n.soundEffects,
                          leading: const Icon(Icons.volume_up),
                          switchValue: japaProvider.soundEnabled,
                          onToggle: (value) {
                            japaProvider.setSoundEnabled(value);
                          },
                        ),
                        SettingsTile(
                          title: l10n.japaSounds,
                          subtitle: l10n.configureSounds,
                          leading: const Icon(Icons.music_note),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showSoundSettingsDialog(l10n);
                          },
                        ),
                      ],
                    ),

                    // AI –ø–æ–º–æ—â–Ω–∏–∫
                    SettingsSection(
                      title: l10n.aiAssistantSection,
                      tiles: [
                        SettingsTile(
                          title: l10n.aiStatus,
                          subtitle: l10n.checkMozgachAvailability,
                          leading: const Icon(Icons.smart_toy),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _checkAIStatus();
                          },
                        ),
                        SettingsTile(
                          title: l10n.aiSettings,
                          subtitle: l10n.aiAssistantParameters,
                          leading: const Icon(Icons.settings),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showAISettingsDialog(l10n);
                          },
                        ),
                        SettingsTile(
                          title: l10n.aiStatistics,
                          subtitle: l10n.aiAssistantUsage,
                          leading: const Icon(Icons.analytics),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showAIStatsDialog(l10n);
                          },
                        ),
                      ],
                    ),

                    // –í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞—Ä—è–¥–∫–µ (–ü—Ä–∞–≤–∏–ª–æ ‚Ññ 4)
                    SettingsSection(
                      title: 'üîã –í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞—Ä—è–¥–∫–µ',
                      tiles: [
                        SettingsTile.switchTile(
                          title: '–í–∫–ª—é—á–∏—Ç—å –Ω–∞ –∑–∞—Ä—è–¥–∫–µ',
                          subtitle:
                              '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞—Ä—è–¥–∫–∏',
                          leading: const Icon(Icons.battery_charging_full),
                          switchValue:
                              true, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∂–µ
                          onToggle: (value) async {
                            await ChargingChantingService.instance
                                .setChargingChantingEnabled(value);
                            setState(() {});
                          },
                        ),
                        SettingsTile.switchTile(
                          title: '–í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ',
                          subtitle: '–†–∞–±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (—ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω–æ)',
                          leading: const Icon(Icons.bedtime),
                          switchValue:
                              false, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∂–µ
                          onToggle: (value) async {
                            await ChargingChantingService.instance
                                .setSleepChantingEnabled(value);
                            setState(() {});
                          },
                        ),
                        SettingsTile.switchTile(
                          title: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –º–æ–¥–µ–ª–∏',
                          subtitle: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ 108 –º–æ–¥–µ–ª–µ–π –ú–æ–∑g–∞—á108',
                          leading: const Icon(Icons.psychology),
                          switchValue:
                              true, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∂–µ
                          onToggle: (value) async {
                            await ChargingChantingService.instance
                                .setUseAIModels(value);
                            setState(() {});
                          },
                        ),
                        SettingsTile(
                          title: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è',
                          subtitle: '30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –º–∞–Ω—Ç—Ä–∞–º–∏',
                          leading: const Icon(Icons.timer),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showChantingIntervalDialog();
                          },
                        ),
                        SettingsTile(
                          title: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è',
                          subtitle: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ª–æ–≥–æ–≤',
                          leading: const Icon(Icons.bar_chart),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showChantingStatsDialog();
                          },
                        ),
                      ],
                    ),

                    // –û–±–ª–∞—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    SettingsSection(
                      title: '–û–±–ª–∞—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                      tiles: [
                        SettingsTile.switchTile(
                          title: '–û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
                          subtitle: _isOnline
                              ? (_cloudFeaturesEnabled
                                    ? '–í–∫–ª—é—á–µ–Ω–∞ ‚Ä¢ –û–Ω–ª–∞–π–Ω'
                                    : '–í—ã–∫–ª—é—á–µ–Ω–∞ ‚Ä¢ –û–Ω–ª–∞–π–Ω')
                              : '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
                          leading: Icon(
                            _isOnline ? Icons.cloud : Icons.cloud_off,
                            color: _isOnline
                                ? (_cloudFeaturesEnabled
                                      ? Colors.green
                                      : Colors.grey)
                                : Colors.red,
                          ),
                          switchValue: _cloudFeaturesEnabled,
                          onToggle: _isOnline
                              ? (value) async {
                                  await _toggleCloudFeatures(value);
                                }
                              : null,
                        ),
                        if (_cloudFeaturesEnabled && _isOnline) ...[
                          SettingsTile(
                            title: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                            subtitle: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏',
                            leading: const Icon(Icons.account_circle),
                            trailing: const Icon(Icons.arrow_forward_ios),
                            onPressed: (context) {
                              Navigator.of(context).push(
                                MaterialPageRoute(
                                  builder: (context) => const ProfileScreen(),
                                ),
                              );
                            },
                          ),
                          SettingsTile(
                            title: '–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                            subtitle:
                                '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                            leading: const Icon(Icons.public),
                            trailing: const Icon(Icons.arrow_forward_ios),
                            onPressed: (context) {
                              _showGlobalStatsDialog();
                            },
                          ),
                          SettingsTile(
                            title: '–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                            subtitle: '–¢–æ–ø –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –¥–∂–∞–ø—É',
                            leading: const Icon(Icons.leaderboard),
                            trailing: const Icon(Icons.arrow_forward_ios),
                            onPressed: (context) {
                              _showLeaderboardDialog();
                            },
                          ),
                          SettingsTile(
                            title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                            subtitle:
                                'AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏',
                            leading: const Icon(Icons.recommend),
                            trailing: const Icon(Icons.arrow_forward_ios),
                            onPressed: (context) {
                              _showRecommendationsDialog();
                            },
                          ),
                          SettingsTile(
                            title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞–∫–∞',
                            subtitle: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Magento –±—ç–∫–µ–Ω–¥–∞',
                            leading: const Icon(Icons.cloud_sync),
                            trailing: const Icon(Icons.arrow_forward_ios),
                            onPressed: (context) {
                              _showCloudSettingsDialog();
                            },
                          ),
                        ],
                      ],
                    ),

                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ
                    SettingsSection(
                      title: l10n.statisticsAndData,
                      tiles: [
                        SettingsTile(
                          title: l10n.overallStatistics,
                          subtitle: l10n.viewAllAchievements,
                          leading: const Icon(Icons.bar_chart),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showOverallStatsDialog(l10n);
                          },
                        ),
                        SettingsTile(
                          title: l10n.dataExport,
                          subtitle: l10n.saveDataToDevice,
                          leading: const Icon(Icons.download),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _exportData(l10n);
                          },
                        ),
                        SettingsTile(
                          title: l10n.clearData,
                          subtitle: l10n.deleteAllSavedData,
                          leading: const Icon(Icons.delete_forever),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showClearDataDialog(l10n);
                          },
                        ),
                      ],
                    ),

                    // –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                    SettingsSection(
                      title: l10n.aboutApp,
                      tiles: [
                        // –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - Easter Egg (7 –Ω–∞–∂–∞—Ç–∏–π –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
                        SettingsTile(
                          title: l10n.version,
                          subtitle: '1.0.0',
                          leading: Icon(
                            _developerModeEnabled
                                ? Icons.developer_mode
                                : Icons.info,
                            color: _developerModeEnabled ? Colors.green : null,
                          ),
                          trailing: _developerModeEnabled
                              ? const Icon(
                                  Icons.check_circle,
                                  color: Colors.green,
                                )
                              : null,
                          onPressed: (context) => _handleVersionTap(),
                        ),
                        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
                        if (_developerModeEnabled)
                          SettingsTile(
                            title: 'üîì –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤',
                            subtitle: '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–π (AES-256)',
                            leading: const Icon(
                              Icons.visibility,
                              color: Colors.blue,
                            ),
                            trailing: const Icon(Icons.arrow_forward_ios),
                            onPressed: (context) {
                              Navigator.of(context).push(
                                MaterialPageRoute(
                                  builder: (context) =>
                                      const EasterEggLogsScreen(),
                                ),
                              );
                            },
                          ),
                        SettingsTile(
                          title: l10n.license,
                          subtitle: l10n.openSource,
                          leading: const Icon(Icons.description),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showLicenseDialog(l10n);
                          },
                        ),
                        SettingsTile(
                          title: l10n.developers,
                          subtitle: l10n.aiJapaTeam,
                          leading: const Icon(Icons.people),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showDevelopersDialog(l10n);
                          },
                        ),
                        SettingsTile(
                          title: l10n.donate,
                          subtitle: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                          leading: const Icon(Icons.favorite),
                          trailing: const Icon(Icons.arrow_forward_ios),
                          onPressed: (context) {
                            _showDonationDialog(l10n);
                          },
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              if (_isLoading)
                Container(
                  color: Colors.black.withOpacity(0.3),
                  child: const Center(child: CircularProgressIndicator()),
                ),
            ],
          );
        },
      ),
    );
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  String _getCurrentLanguageName(LocaleProvider localeProvider) {
    final currentInfo = localeProvider.getCurrentLocaleInfo();
    return currentInfo?['nativeName'] ?? '–†—É—Å—Å–∫–∏–π';
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
  void _showLanguageSelectionDialog(LocaleProvider localeProvider) {
    AnimatedNavigation.showAnimatedDialog(
      context,
      child: AlertDialog(
        title: Text(SimpleLocalizations().selectLanguage),
        content: SizedBox(
          width: double.maxFinite,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: LocaleProvider.availableLocales.length,
            itemBuilder: (context, index) {
              final locale = LocaleProvider.availableLocales[index];
              final isSelected =
                  localeProvider.currentLocale.languageCode == locale['code'];

              return ListTile(
                leading: Text(
                  locale['flag']!,
                  style: const TextStyle(fontSize: 24),
                ),
                title: Text(
                  locale['name']!,
                  style: TextStyle(
                    fontWeight: isSelected
                        ? FontWeight.bold
                        : FontWeight.normal,
                  ),
                ),
                subtitle: Text(locale['description']!),
                trailing: isSelected
                    ? const Icon(Icons.check, color: Colors.green)
                    : null,
                onTap: () {
                  localeProvider.setLocale(locale['code']!);
                  Navigator.of(context).pop();
                },
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: Text(SimpleLocalizations().close),
          ),
        ],
      ),
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  void _showDailyReminderDialog(SimpleLocalizations l10n) {
    TimeOfDay selectedTime = const TimeOfDay(hour: 6, minute: 0);

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text(l10n.dailyReminder),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(l10n.setJapaTime),
                  const SizedBox(height: 16),
                  ListTile(
                    leading: const Icon(Icons.access_time),
                    title: Text(
                      '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${selectedTime.format(context)}',
                    ),
                    trailing: const Icon(Icons.arrow_forward_ios),
                    onTap: () async {
                      final TimeOfDay? picked = await showTimePicker(
                        context: context,
                        initialTime: selectedTime,
                      );
                      if (picked != null) {
                        setState(() {
                          selectedTime = picked;
                        });
                      }
                    },
                  ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text(l10n.cancel),
                ),
                TextButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                    await _setDailyReminder(selectedTime, l10n);
                  },
                  child: Text(l10n.set),
                ),
              ],
            );
          },
        );
      },
    );
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  Future<void> _setDailyReminder(
    TimeOfDay time,
    SimpleLocalizations l10n,
  ) async {
    try {
      await NotificationService.scheduleDailyReminder(
        time: time,
        title: '–í—Ä–µ–º—è –¥–ª—è –¥–∂–∞–ø—ã! üïâÔ∏è',
        body: '–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é –¥—É—Ö–æ–≤–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É',
      );

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${time.format(context)}',
          ),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  void _showScheduleDialog(SimpleLocalizations l10n) {
    List<TimeOfDay> scheduledTimes = [];

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text(l10n.japaSchedule),
              content: SizedBox(
                width: double.maxFinite,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(l10n.setMultipleTimes),
                    const SizedBox(height: 16),
                    if (scheduledTimes.isEmpty)
                      const Text(
                        '–ù–∞–∂–º–∏—Ç–µ "+" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è',
                        style: TextStyle(color: Colors.grey),
                      )
                    else
                      ...scheduledTimes.asMap().entries.map((entry) {
                        final index = entry.key;
                        final time = entry.value;
                        return ListTile(
                          leading: const Icon(Icons.schedule),
                          title: Text(time.format(context)),
                          trailing: IconButton(
                            icon: const Icon(Icons.delete, color: Colors.red),
                            onPressed: () {
                              setState(() {
                                scheduledTimes.removeAt(index);
                              });
                            },
                          ),
                        );
                      }),
                    const SizedBox(height: 16),
                    ElevatedButton.icon(
                      onPressed: () async {
                        final TimeOfDay? picked = await showTimePicker(
                          context: context,
                          initialTime: const TimeOfDay(hour: 6, minute: 0),
                        );
                        if (picked != null) {
                          setState(() {
                            scheduledTimes.add(picked);
                            scheduledTimes.sort(
                              (a, b) => (a.hour * 60 + a.minute).compareTo(
                                b.hour * 60 + b.minute,
                              ),
                            );
                          });
                        }
                      },
                      icon: const Icon(Icons.add),
                      label: const Text('–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è'),
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text(l10n.cancel),
                ),
                TextButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                    await _setSchedule(scheduledTimes, l10n);
                  },
                  child: Text(l10n.configure),
                ),
              ],
            );
          },
        );
      },
    );
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∂–∞–ø—ã
  Future<void> _setSchedule(
    List<TimeOfDay> times,
    SimpleLocalizations l10n,
  ) async {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      final timesJson = times
          .map((time) => '${time.hour}:${time.minute}')
          .toList();
      await prefs.setStringList('japa_schedule', timesJson);

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      for (int i = 0; i < times.length; i++) {
        await NotificationService.scheduleDailyReminder(
          time: times[i],
          title: '–í—Ä–µ–º—è –¥–ª—è –¥–∂–∞–ø—ã! üïâÔ∏è',
          body: '–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é –¥—É—Ö–æ–≤–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É (${i + 1}/${times.length})',
        );
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${times.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  void _showSoundSettingsDialog(SimpleLocalizations l10n) {
    final audioService = AudioService();
    final settings = audioService.getSettings();

    String selectedSound = settings['currentSoundType'] as String;
    double volume = settings['volume'] as double;
    bool enableSound = settings['soundEnabled'] as bool;

    final availableSounds = audioService.getAvailableSounds();
    final soundOptions = <String, String>{};

    for (final sound in availableSounds) {
      soundOptions[sound] = audioService.getSoundName(sound);
    }

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text(l10n.japaSounds),
              content: SizedBox(
                width: double.maxFinite,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(l10n.configureSounds),
                    const SizedBox(height: 16),

                    // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
                    SwitchListTile(
                      title: const Text('–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–∏'),
                      subtitle: const Text('–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –¥–∂–∞–ø–µ'),
                      value: enableSound,
                      onChanged: (value) {
                        setState(() {
                          enableSound = value;
                        });
                      },
                    ),

                    if (enableSound) ...[
                      const SizedBox(height: 16),

                      // –í—ã–±–æ—Ä –∑–≤—É–∫–∞
                      DropdownButtonFormField<String>(
                        initialValue: selectedSound,
                        decoration: const InputDecoration(
                          labelText: '–¢–∏–ø –∑–≤—É–∫–∞',
                          border: OutlineInputBorder(),
                        ),
                        items: soundOptions.entries.map((entry) {
                          return DropdownMenuItem(
                            value: entry.key,
                            child: Text(entry.value),
                          );
                        }).toList(),
                        onChanged: (value) {
                          if (value != null) {
                            setState(() {
                              selectedSound = value;
                            });
                          }
                        },
                      ),

                      const SizedBox(height: 16),

                      // –ì—Ä–æ–º–∫–æ—Å—Ç—å
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text('–ì—Ä–æ–º–∫–æ—Å—Ç—å: ${(volume * 100).round()}%'),
                          Slider(
                            value: volume,
                            min: 0.0,
                            max: 1.0,
                            divisions: 10,
                            onChanged: (value) {
                              setState(() {
                                volume = value;
                              });
                            },
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
                      ElevatedButton.icon(
                        onPressed: () {
                          _playTestSound(selectedSound, volume);
                        },
                        icon: const Icon(Icons.play_arrow),
                        label: const Text('–ü—Ä–æ—Å–ª—É—à–∞—Ç—å'),
                      ),
                    ],
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text(l10n.cancel),
                ),
                TextButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                    await _saveSoundSettings(
                      selectedSound,
                      volume,
                      enableSound,
                      l10n,
                    );
                  },
                  child: Text(l10n.configure),
                ),
              ],
            );
          },
        );
      },
    );
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
  void _playTestSound(String soundType, double volume) {
    try {
      AudioService().playTestSound(soundType);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            '–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è: ${AudioService().getSoundName(soundType)} (–≥—Ä–æ–º–∫–æ—Å—Ç—å: ${(volume * 100).round()}%)',
          ),
          duration: const Duration(seconds: 2),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞
  Future<void> _saveSoundSettings(
    String soundType,
    double volume,
    bool enableSound,
    SimpleLocalizations l10n,
  ) async {
    try {
      final audioService = AudioService();
      await audioService.setSoundType(soundType);
      await audioService.setVolume(volume);
      await audioService.setSoundEnabled(enableSound);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å AI
  Future<void> _checkAIStatus() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final isServerAvailable = await AIService.isServerAvailable();
      final isBraindlerAvailable = await AIService.isBraindlerAvailable();
      final availableModels = await AIService.getAvailableModels();
      final modelInfo = await AIService.getModelInfo();

      String statusMessage;
      Color statusColor;

      if (isServerAvailable && isBraindlerAvailable) {
        statusMessage =
            'AI —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n–ú–æ–¥–µ–ª—å braindler:q2_k –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: ${availableModels.length}';
        statusColor = Colors.green;
      } else if (isServerAvailable) {
        statusMessage =
            'AI —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ braindler –Ω–µ –Ω–∞–π–¥–µ–Ω\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: ${availableModels.join(', ')}';
        statusColor = Colors.orange;
      } else {
        statusMessage =
            'AI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ localhost:11434';
        statusColor = Colors.red;
      }

      if (mounted) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Row(
                children: [
                  Icon(
                    isServerAvailable && isBraindlerAvailable
                        ? Icons.check_circle
                        : Icons.error,
                    color: statusColor,
                  ),
                  const SizedBox(width: 8),
                  const Text('–°—Ç–∞—Ç—É—Å AI'),
                ],
              ),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(statusMessage, style: TextStyle(color: statusColor)),
                  if (modelInfo != null) ...[
                    const SizedBox(height: 16),
                    const Text(
                      '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text('–†–∞–∑–º–µ—Ä: ${modelInfo['size'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}'),
                    Text('–°–µ–º–µ–π—Å—Ç–≤–æ: ${modelInfo['family'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}'),
                    Text(
                      '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${modelInfo['parameter_size'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}',
                    ),
                  ],
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
                ),
                if (!isServerAvailable || !isBraindlerAvailable)
                  TextButton(
                    onPressed: () {
                      Navigator.of(context).pop();
                      _showAIHelpDialog();
                    },
                    child: const Text('–ü–æ–º–æ—â—å'),
                  ),
              ],
            );
          },
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ AI: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–º–æ—â–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ AI
  void _showAIHelpDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI'),
          content: const SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text('–î–ª—è —Ä–∞–±–æ—Ç—ã AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:'),
                SizedBox(height: 8),
                Text('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ollama: https://ollama.ai'),
                Text('2. –ó–∞–ø—É—Å—Ç–∏—Ç—å Ollama —Å–µ—Ä–≤–µ—Ä'),
                Text('3. –°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å mozgach:latest'),
                SizedBox(height: 16),
                Text('–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:'),
                SizedBox(height: 8),
                Text(
                  'ollama pull mozgach:latest',
                  style: TextStyle(fontFamily: 'monospace'),
                ),
                SizedBox(height: 8),
                Text('ollama serve', style: TextStyle(fontFamily: 'monospace')),
                SizedBox(height: 16),
                Text('–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.'),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('–ü–æ–Ω—è—Ç–Ω–æ'),
            ),
          ],
        );
      },
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI
  void _showAISettingsDialog(SimpleLocalizations l10n) {
    String selectedModel = 'mozgach:latest';
    double temperature = 0.7;
    int maxTokens = 500;
    bool useLocalResponses = true;
    bool enableCache = true;

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text(l10n.aiSettings),
              content: SizedBox(
                width: double.maxFinite,
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(l10n.aiAssistantParameters),
                      const SizedBox(height: 16),

                      // –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
                      DropdownButtonFormField<String>(
                        initialValue: selectedModel,
                        decoration: const InputDecoration(
                          labelText: 'AI –ú–æ–¥–µ–ª—å',
                          border: OutlineInputBorder(),
                        ),
                        items: const [
                          DropdownMenuItem(
                            value: 'mozgach:latest',
                            child: Text('mozgach:latest (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'),
                          ),
                          DropdownMenuItem(
                            value: 'llama2:latest',
                            child: Text('llama2:latest'),
                          ),
                          DropdownMenuItem(
                            value: 'mistral:latest',
                            child: Text('mistral:latest'),
                          ),
                        ],
                        onChanged: (value) {
                          if (value != null) {
                            setState(() {
                              selectedModel = value;
                            });
                          }
                        },
                      ),

                      const SizedBox(height: 16),

                      // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature.toStringAsFixed(1)}',
                          ),
                          Slider(
                            value: temperature,
                            min: 0.0,
                            max: 1.0,
                            divisions: 10,
                            onChanged: (value) {
                              setState(() {
                                temperature = value;
                              });
                            },
                          ),
                          const Text(
                            '–ù–∏–∑–∫–∞—è: –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n–í—ã—Å–æ–∫–∞—è: –±–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã',
                            style: TextStyle(fontSize: 12, color: Colors.grey),
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                      TextFormField(
                        initialValue: maxTokens.toString(),
                        decoration: const InputDecoration(
                          labelText: '–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤',
                          border: OutlineInputBorder(),
                          helperText: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞',
                        ),
                        keyboardType: TextInputType.number,
                        onChanged: (value) {
                          final parsed = int.tryParse(value);
                          if (parsed != null && parsed > 0) {
                            setState(() {
                              maxTokens = parsed;
                            });
                          }
                        },
                      ),

                      const SizedBox(height: 16),

                      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                      SwitchListTile(
                        title: const Text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã'),
                        subtitle: const Text(
                          '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                        ),
                        value: useLocalResponses,
                        onChanged: (value) {
                          setState(() {
                            useLocalResponses = value;
                          });
                        },
                      ),

                      SwitchListTile(
                        title: const Text('–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã'),
                        subtitle: const Text(
                          '–°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞',
                        ),
                        value: enableCache,
                        onChanged: (value) {
                          setState(() {
                            enableCache = value;
                          });
                        },
                      ),
                    ],
                  ),
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text(l10n.cancel),
                ),
                TextButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                    await _saveAISettings(
                      selectedModel,
                      temperature,
                      maxTokens,
                      useLocalResponses,
                      enableCache,
                      l10n,
                    );
                  },
                  child: Text(l10n.configure),
                ),
              ],
            );
          },
        );
      },
    );
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
  Future<void> _saveAISettings(
    String model,
    double temperature,
    int maxTokens,
    bool useLocalResponses,
    bool enableCache,
    SimpleLocalizations l10n,
  ) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('ai_model', model);
      await prefs.setDouble('ai_temperature', temperature);
      await prefs.setInt('ai_max_tokens', maxTokens);
      await prefs.setBool('ai_use_local_responses', useLocalResponses);
      await prefs.setBool('ai_enable_cache', enableCache);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI
  void _showAIStatsDialog(SimpleLocalizations l10n) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(l10n.aiStatistics),
          content: Text(l10n.aiAssistantUsage),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(l10n.close),
            ),
          ],
        );
      },
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  void _showOverallStatsDialog(SimpleLocalizations l10n) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(l10n.overallStatistics),
          content: Consumer<JapaProvider>(
            builder: (context, japaProvider, child) {
              final stats = japaProvider.getOverallStats();
              return Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('${l10n.totalSessions}: ${stats['totalSessions']}'),
                  Text('${l10n.totalRounds}: ${stats['totalRounds']}'),
                  Text(
                    '${l10n.totalTime}: ${stats['totalTime'].inHours}${l10n.hours} ${stats['totalTime'].inMinutes % 60}${l10n.minutesShort}',
                  ),
                  Text(
                    '${l10n.averageRoundsPerSession}: ${stats['averageRoundsPerSession']}',
                  ),
                  Text(
                    '${l10n.averageTimePerSession}: ${stats['averageTimePerSession']} ${l10n.minutes}',
                  ),
                ],
              );
            },
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(l10n.close),
            ),
          ],
        );
      },
    );
  }

  /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
  Future<void> _exportData(SimpleLocalizations l10n) async {
    try {
      setState(() {
        _isLoading = true;
      });

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      final allKeys = prefs.getKeys();

      final exportData = <String, dynamic>{};

      for (final key in allKeys) {
        final value = prefs.get(key);
        if (value != null) {
          exportData[key] = value;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
      exportData['export_metadata'] = {
        'export_date': DateTime.now().toIso8601String(),
        'app_version': '1.0.0',
        'total_keys': allKeys.length,
      };

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      final jsonString = const JsonEncoder.withIndent('  ').convert(exportData);

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ª–æ–≥–µ
      if (mounted) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'),
              content: SizedBox(
                width: double.maxFinite,
                height: 400,
                child: Column(
                  children: [
                    const Text('–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É:'),
                    const SizedBox(height: 16),
                    Expanded(
                      child: SingleChildScrollView(
                        child: SelectableText(
                          jsonString,
                          style: const TextStyle(
                            fontFamily: 'monospace',
                            fontSize: 12,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
                ),
                TextButton(
                  onPressed: () {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'),
                        backgroundColor: Colors.green,
                      ),
                    );
                    Navigator.of(context).pop();
                  },
                  child: const Text('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'),
                ),
              ],
            );
          },
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  void _showClearDataDialog(SimpleLocalizations l10n) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(l10n.clearData),
          content: const Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?'),
              SizedBox(height: 8),
              Text('–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:'),
              Text('‚Ä¢ –í—Å–µ —Å–µ—Å—Å–∏–∏ –¥–∂–∞–ø—ã'),
              Text('‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
              Text('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
              Text('‚Ä¢ –†–∞–∑–≥–æ–≤–æ—Ä—ã —Å AI'),
              SizedBox(height: 8),
              Text(
                '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.red,
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(l10n.cancel),
            ),
            TextButton(
              onPressed: () async {
                Navigator.of(context).pop();
                await _clearAllData(l10n);
              },
              child: Text(
                l10n.delete,
                style: const TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> _clearAllData(SimpleLocalizations l10n) async {
    try {
      setState(() {
        _isLoading = true;
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      final confirmed = await showDialog<bool>(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text('–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'),
            content: const Text(
              '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!',
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop(false);
                },
                child: const Text('–û—Ç–º–µ–Ω–∞'),
              ),
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop(true);
                },
                child: const Text(
                  '–£–î–ê–õ–ò–¢–¨ –í–°–ï',
                  style: TextStyle(
                    color: Colors.red,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          );
        },
      );

      if (confirmed == true) {
        // –û—á–∏—â–∞–µ–º SharedPreferences
        final prefs = await SharedPreferences.getInstance();
        await prefs.clear();

        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await NotificationService.cancelAll();

        // –û—á–∏—â–∞–µ–º –∫—ç—à AI
        AIService.clearCache();

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã'),
              backgroundColor: Colors.green,
            ),
          );

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å restart_app –ø–∞–∫–µ—Ç
          // Restart.restartApp();
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ª–∏—Ü–µ–Ω–∑–∏–∏
  void _showLicenseDialog(SimpleLocalizations l10n) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(l10n.license),
          content: const Text(
            '–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π MIT. –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub.',
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(l10n.close),
            ),
          ],
        );
      },
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  void _showDevelopersDialog(SimpleLocalizations l10n) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(l10n.developers),
          content: const Text(
            'AI –î–∂–∞–ø–∞ –ú–∞—Ö–∞–º–∞–Ω—Ç—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.',
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(l10n.close),
            ),
          ],
        );
      },
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
  void _showDonationDialog(SimpleLocalizations l10n) {
    const String donationAddress = '0xffcba0b4980eb2d2336bfdb1e5a0fc49c620908a';

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              const Icon(Icons.favorite, color: Colors.red),
              const SizedBox(width: 8),
              Text(l10n.donate),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                '–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AI –î–∂–∞–ø–∞ –ú–∞—Ö–∞–º–∞–Ω—Ç—Ä–∞!',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              const Text('–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π:'),
              const SizedBox(height: 8),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: SelectableText(
                  donationAddress,
                  style: const TextStyle(fontFamily: 'monospace', fontSize: 12),
                ),
              ),
              const SizedBox(height: 16),
              const Text(
                '–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 8),
              const Text('‚Ä¢ –£–ª—É—á—à–∞—Ç—å AI-–ø–æ–º–æ—â–Ω–∏–∫–∞'),
              const Text('‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'),
              const Text('‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã'),
              const Text('‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å –¥—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(l10n.close),
            ),
            TextButton(
              onPressed: () {
                // –ö–æ–ø–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å clipboard –ø–∞–∫–µ—Ç
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'),
                    backgroundColor: Colors.green,
                  ),
                );
                Navigator.of(context).pop();
              },
              child: const Text('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å'),
            ),
          ],
        );
      },
    );
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ–±–ª–∞—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  Future<void> _toggleCloudFeatures(bool enabled) async {
    setState(() {
      _isLoading = true;
    });

    try {
      await _magentoService.setCloudFeaturesEnabled(enabled);

      if (enabled) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Magento —Å–µ—Ä–≤–∏—Å —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await _magentoService.initialize(
          baseUrl: 'https://your-magento-backend.com', // TODO: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å URL
          // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        );
      }

      setState(() {
        _cloudFeaturesEnabled = enabled;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            enabled
                ? '–û–±–ª–∞—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã'
                : '–û–±–ª–∞—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã',
          ),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Future<void> _showGlobalStatsDialog() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final stats = await _magentoService.getGlobalStatistics();

      if (mounted) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
              content: stats != null
                  ? Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats['totalUsers'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}',
                        ),
                        Text(
                          '–í—Å–µ–≥–æ –∫—Ä—É–≥–æ–≤ –¥–∂–∞–ø—ã: ${stats['totalRounds'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}',
                        ),
                        Text(
                          '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats['activeToday'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}',
                        ),
                        Text(
                          '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${stats['averageProgress'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}',
                        ),
                      ],
                    )
                  : const Text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
                ),
              ],
            );
          },
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–π—Ç–∏–Ω–≥–∞
  Future<void> _showLeaderboardDialog() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final leaderboard = await _magentoService.getLeaderboard(limit: 20);

      if (mounted) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
              content: SizedBox(
                width: double.maxFinite,
                height: 400,
                child: leaderboard != null && leaderboard.isNotEmpty
                    ? ListView.builder(
                        itemCount: leaderboard.length,
                        itemBuilder: (context, index) {
                          final user = leaderboard[index];
                          return ListTile(
                            leading: CircleAvatar(child: Text('${index + 1}')),
                            title: Text(
                              user['name'] ?? '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                            ),
                            subtitle: Text(
                              '${user['totalRounds'] ?? 0} –∫—Ä—É–≥–æ–≤',
                            ),
                            trailing: Text(
                              '${user['streak'] ?? 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                            ),
                          );
                        },
                      )
                    : const Center(child: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥')),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
                ),
              ],
            );
          },
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  Future<void> _showRecommendationsDialog() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      final prefs = await SharedPreferences.getInstance();
      final userId = prefs.getString('user_id') ?? 'anonymous';

      final recommendations = await _magentoService
          .getPersonalizedRecommendations(userId);

      if (mounted) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'),
              content: SizedBox(
                width: double.maxFinite,
                height: 300,
                child: recommendations != null && recommendations.isNotEmpty
                    ? ListView.builder(
                        itemCount: recommendations.length,
                        itemBuilder: (context, index) {
                          final recommendation = recommendations[index];
                          return Card(
                            margin: const EdgeInsets.only(bottom: 8),
                            child: Padding(
                              padding: const EdgeInsets.all(12),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    recommendation['title'] ?? '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  const SizedBox(height: 4),
                                  Text(recommendation['description'] ?? ''),
                                  if (recommendation['priority'] != null)
                                    Chip(
                                      label: Text(
                                        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${recommendation['priority']}',
                                        style: const TextStyle(fontSize: 12),
                                      ),
                                    ),
                                ],
                              ),
                            ),
                          );
                        },
                      )
                    : const Center(child: Text('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
                ),
              ],
            );
          },
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–ª–∞–∫–∞
  void _showCloudSettingsDialog() {
    String baseUrl = 'https://your-magento-backend.com';
    String consumerKey = '';
    String consumerSecret = '';
    String accessToken = '';
    String accessTokenSecret = '';

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞–∫–∞'),
              content: SizedBox(
                width: double.maxFinite,
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Magento –±—ç–∫–µ–Ω–¥—É'),
                      const SizedBox(height: 16),

                      TextFormField(
                        initialValue: baseUrl,
                        decoration: const InputDecoration(
                          labelText: 'URL –±—ç–∫–µ–Ω–¥–∞',
                          border: OutlineInputBorder(),
                        ),
                        onChanged: (value) => baseUrl = value,
                      ),
                      const SizedBox(height: 12),

                      TextFormField(
                        initialValue: consumerKey,
                        decoration: const InputDecoration(
                          labelText: 'Consumer Key',
                          border: OutlineInputBorder(),
                        ),
                        onChanged: (value) => consumerKey = value,
                      ),
                      const SizedBox(height: 12),

                      TextFormField(
                        initialValue: consumerSecret,
                        decoration: const InputDecoration(
                          labelText: 'Consumer Secret',
                          border: OutlineInputBorder(),
                        ),
                        obscureText: true,
                        onChanged: (value) => consumerSecret = value,
                      ),
                      const SizedBox(height: 12),

                      TextFormField(
                        initialValue: accessToken,
                        decoration: const InputDecoration(
                          labelText: 'Access Token',
                          border: OutlineInputBorder(),
                        ),
                        onChanged: (value) => accessToken = value,
                      ),
                      const SizedBox(height: 12),

                      TextFormField(
                        initialValue: accessTokenSecret,
                        decoration: const InputDecoration(
                          labelText: 'Access Token Secret',
                          border: OutlineInputBorder(),
                        ),
                        obscureText: true,
                        onChanged: (value) => accessTokenSecret = value,
                      ),
                    ],
                  ),
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
                TextButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                    await _saveCloudSettings(
                      baseUrl,
                      consumerKey,
                      consumerSecret,
                      accessToken,
                      accessTokenSecret,
                    );
                  },
                  child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞–∫–∞
  Future<void> _saveCloudSettings(
    String baseUrl,
    String consumerKey,
    String consumerSecret,
    String accessToken,
    String accessTokenSecret,
  ) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('magento_base_url', baseUrl);
      await prefs.setString('magento_consumer_key', consumerKey);
      await prefs.setString('magento_consumer_secret', consumerSecret);
      await prefs.setString('magento_access_token', accessToken);
      await prefs.setString('magento_access_token_secret', accessTokenSecret);

      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Magento —Å–µ—Ä–≤–∏—Å —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      if (_cloudFeaturesEnabled) {
        await _magentoService.initialize(
          baseUrl: baseUrl,
          consumerKey: consumerKey,
          consumerSecret: consumerSecret,
          accessToken: accessToken,
          accessTokenSecret: accessTokenSecret,
        );
      }

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è
  void _showChantingIntervalDialog() {
    int currentInterval = 30; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text('–í—Ä–µ–º—è –º–µ–∂–¥—É –º–∞–Ω—Ç—Ä–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã):'),
                  const SizedBox(height: 16),
                  Slider(
                    value: currentInterval.toDouble(),
                    min: 10,
                    max: 300,
                    divisions: 29,
                    label: '$currentInterval —Å–µ–∫',
                    onChanged: (value) {
                      setState(() {
                        currentInterval = value.toInt();
                      });
                    },
                  ),
                  Text(
                    '$currentInterval —Å–µ–∫—É–Ω–¥',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '–ü—Ä–∏–º–µ—Ä–Ω–æ ${(3600 / currentInterval).floor()} –≤–æ—Å–ø–µ–≤–∞–Ω–∏–π –≤ —á–∞—Å',
                    style: Theme.of(context).textTheme.bodySmall,
                  ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
                TextButton(
                  onPressed: () async {
                    await ChargingChantingService.instance.setChantingInterval(
                      currentInterval,
                    );
                    Navigator.of(context).pop();
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(
                          '–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $currentInterval —Å–µ–∫—É–Ω–¥',
                        ),
                        backgroundColor: Colors.green,
                      ),
                    );
                  },
                  child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞—Ä—è–¥–∫–µ
  void _showChantingStatsDialog() {
    final stats = ChargingChantingService.instance.getStatistics();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.battery_charging_full, color: Colors.green),
              SizedBox(width: 8),
              Text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è'),
            ],
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildStatRow(
                  '–°—Ç–∞—Ç—É—Å',
                  stats['is_chanting'] ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ',
                ),
                _buildStatRow(
                  '–ù–∞ –∑–∞—Ä—è–¥–∫–µ',
                  stats['is_charging'] ? 'üîã –î–∞' : 'ü™´ –ù–µ—Ç',
                ),
                _buildStatRow('–ë–∞—Ç–∞—Ä–µ—è', '${stats['battery_level']}%'),
                const Divider(),
                _buildStatRow('–í—Å–µ–≥–æ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–π', '${stats['total_chants']}'),
                _buildStatRow(
                  '–ù–∞ –∑–∞—Ä—è–¥–∫–µ',
                  '${stats['chants_during_charging']}',
                ),
                _buildStatRow(
                  '–í —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ',
                  '${stats['chants_during_sleep']}',
                ),
                const Divider(),
                _buildStatRow('–ò–Ω—Ç–µ—Ä–≤–∞–ª', '${stats['interval_seconds']} —Å–µ–∫'),
                _buildStatRow(
                  '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI',
                  stats['use_ai_models'] ? 'üß† –î–∞' : 'üí° Low Power',
                ),
                const Divider(),
                if (stats['last_chant_time'] != null)
                  _buildStatRow(
                    '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ',
                    _formatDateTime(stats['last_chant_time']),
                  ),
                if (stats['charging_start_time'] != null)
                  _buildStatRow(
                    '–ó–∞—Ä—è–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
                    _formatDateTime(stats['charging_start_time']),
                  ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _showChantingLogsDialog();
              },
              child: const Text('–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏'),
            ),
          ],
        );
      },
    );
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Widget _buildStatRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: const TextStyle(fontWeight: FontWeight.w500)),
          Text(value),
        ],
      ),
    );
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  String _formatDateTime(String? isoString) {
    if (isoString == null) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    try {
      final dt = DateTime.parse(isoString);
      return '${dt.day}.${dt.month}.${dt.year} ${dt.hour}:${dt.minute.toString().padLeft(2, '0')}';
    } catch (e) {
      return '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞';
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ª–æ–≥–∞–º–∏ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è
  void _showChantingLogsDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.article, color: Colors.blue),
              SizedBox(width: 8),
              Text('–õ–æ–≥–∏ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è'),
            ],
          ),
          content: SizedBox(
            width: double.maxFinite,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Text(
                  '–õ–æ–≥–∏ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ Easter Egg',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontStyle: FontStyle.italic),
                ),
                const SizedBox(height: 16),
                const Divider(),
                const SizedBox(height: 8),
                const Text(
                  '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω—ã–º –ª–æ–≥–∞–º:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                const Text('1. –¢—Ä–æ–π–Ω–æ–π —Ç–∞–ø –Ω–∞ 108-–π –±—É—Å–∏–Ω–µ'),
                const Text('2. –ò–ª–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞–Ω–¥–∞–ª—ã + —Å–≤–∞–π–ø 108 —Ä–∞–∑'),
                const SizedBox(height: 16),
                ElevatedButton.icon(
                  onPressed: () {
                    Navigator.of(context).pop();
                    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –ª–æ–≥–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                  },
                  icon: const Icon(Icons.lock),
                  label: const Text('–û—Ç–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –ª–æ–≥–∏'),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
            ),
          ],
        );
      },
    );
  }
}
