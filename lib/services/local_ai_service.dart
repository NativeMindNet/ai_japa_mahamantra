import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_llama/flutter_llama.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π AI –º–æ–¥–µ–ª—å—é –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç flutter_llama –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GGUF –º–æ–¥–µ–ª–µ–π
class LocalAIService {
  static LocalAIService? _instance;

  final FlutterLlama _llama = FlutterLlama.instance;

  bool _isInitialized = false;
  bool _isModelLoaded = false;
  String? _modelPath;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞–Ω—Ç—Ä
  int _mantrasSent = 0;
  int _mantrasProcessed = 0;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
  static const int _nThreads = 8; // –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤
  static const int _nGpuLayers = -1; // –í—Å–µ —Å–ª–æ–∏ –Ω–∞ GPU
  static const int _contextSize = 4096; // –ë–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  static const double _temperature = 0.8; // –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
  static const double _topP = 0.95; // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
  static const int _topK = 60; // –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
  static const int _maxTokens = 512; // –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞

  LocalAIService._();

  /// –ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
  static LocalAIService get instance {
    _instance ??= LocalAIService._();
    return _instance!;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å
  Future<bool> initialize() async {
    if (_isInitialized) return true;

    try {
      if (kDebugMode) {
        debugPrint('‚ÑπÔ∏è LocalAI: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å flutter_llama');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ –≤ assets –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
      final modelPath = await _findOrExtractModel();

      if (modelPath == null) {
        debugPrint('–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ GGUF.');
        return false;
      }

      _modelPath = modelPath;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º llama —á–µ—Ä–µ–∑ flutter_llama
      if (kDebugMode) {
        debugPrint('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Llama —Å –º–æ–¥–µ–ª—å—é: $modelPath');
      }

      final config = LlamaConfig(
        modelPath: modelPath,
        nThreads: _nThreads,
        nGpuLayers: _nGpuLayers,
        contextSize: _contextSize,
        batchSize: 512,
        useGpu: true,
        verbose: kDebugMode,
      );

      final success = await _llama.loadModel(config);

      _isInitialized = success;
      _isModelLoaded = success;

      if (success && kDebugMode) {
        debugPrint('‚úÖ LocalAIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å flutter_llama');
        final info = await _llama.getModelInfo();
        if (info != null) {
          debugPrint('üìä Model Info: $info');
        }
      }

      return success;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LocalAIService: $e');
      _isInitialized = false;
      _isModelLoaded = false;
      return false;
    }
  }

  /// –ò—â–µ—Ç –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ assets
  Future<String?> _findOrExtractModel() async {
    try {
      final documentsDir = await getApplicationDocumentsDirectory();
      final modelFile = File('${documentsDir.path}/models/braindler-q2_k.gguf');

      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (await modelFile.exists()) {
        debugPrint('–ú–æ–¥–µ–ª—å braindler –Ω–∞–π–¥–µ–Ω–∞: ${modelFile.path}');
        return modelFile.path;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ assets
      try {
        final modelsDir = Directory('${documentsDir.path}/models');
        if (!await modelsDir.exists()) {
          await modelsDir.create(recursive: true);
        }

        // –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å braindler –∏–∑ assets
        debugPrint('–ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å braindler –∏–∑ assets...');
        final byteData = await rootBundle.load(
          'assets/models/braindler-q2_k.gguf',
        );
        final buffer = byteData.buffer;
        await modelFile.writeAsBytes(
          buffer.asUint8List(byteData.offsetInBytes, byteData.lengthInBytes),
        );

        debugPrint('–ú–æ–¥–µ–ª—å braindler –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–∑ assets: ${modelFile.path}');
        return modelFile.path;
      } catch (e) {
        debugPrint('–ú–æ–¥–µ–ª—å braindler –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ assets: $e');
        return null;
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–∏ braindler: $e');
      return null;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞–Ω—Ç—Ä—É –∫ AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
  Future<bool> sendMantraToAI({
    required String mantra,
    required int beadNumber,
    required int roundNumber,
    String? sessionContext,
  }) async {
    if (!_isInitialized || !_isModelLoaded) {
      debugPrint('AI —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return false;
    }

    try {
      _mantrasSent++;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      final prompt = _buildMantraPrompt(
        mantra: mantra,
        beadNumber: beadNumber,
        roundNumber: roundNumber,
        sessionContext: sessionContext,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
      _processMantraInBackground(prompt);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await _updateStatistics();

      return true;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞–Ω—Ç—Ä—ã –∫ AI: $e');
      return false;
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞–Ω—Ç—Ä—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  Future<void> _processMantraInBackground(String prompt) async {
    try {
      final params = GenerationParams(
        prompt: prompt,
        temperature: _temperature,
        topP: _topP,
        topK: _topK,
        maxTokens: _maxTokens,
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      final response = await _llama.generate(params);

      if (response.text.isNotEmpty) {
        _mantrasProcessed++;
        final preview = response.text.length > 50
            ? '${response.text.substring(0, 50)}...'
            : response.text;
        debugPrint('–ú–∞–Ω—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ AI: $preview');
        debugPrint('–°–∫–æ—Ä–æ—Å—Ç—å: ${response.tokensPerSecond.toStringAsFixed(2)} tok/s');
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–Ω—Ç—Ä—ã: $e');
    }
  }

  /// –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞–Ω—Ç—Ä—ã
  String _buildMantraPrompt({
    required String mantra,
    required int beadNumber,
    required int roundNumber,
    String? sessionContext,
  }) {
    final context = sessionContext ?? '–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∂–∞–ø–∞-–º–µ–¥–∏—Ç–∞—Ü–∏–∏';

    return '''
–Ø –ø—Ä–∞–∫—Ç–∏–∫—É—é –¥–∂–∞–ø–∞-–º–µ–¥–∏—Ç–∞—Ü–∏—é. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏: $context

–ö—Ä—É–≥: $roundNumber
–ë—É—Å–∏–Ω–∞: $beadNumber –∏–∑ 108

–ú–∞–Ω—Ç—Ä–∞ –Ω–∞ —ç—Ç–æ–π –±—É—Å–∏–Ω–µ:
$mantra

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–ª–∞–≥–æ—Å–ª–æ–≤–∏ —ç—Ç—É –º–∞–Ω—Ç—Ä—É –∏ –¥–∞–π –¥—É—Ö–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏.
–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –≤–æ–∑–≤—ã—à–∞—é—â–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ.
''';
  }

  /// –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
  Future<String?> askQuestion(
    String question, {
    String category = 'spiritual',
  }) async {
    if (!_isInitialized || !_isModelLoaded) {
      return _getOfflineAnswer(question);
    }

    try {
      final prompt = _buildQuestionPrompt(question, category);

      final params = GenerationParams(
        prompt: prompt,
        temperature: _temperature,
        topP: _topP,
        topK: _topK,
        maxTokens: _maxTokens,
      );

      final response = await _llama.generate(params);

      return response.text.isNotEmpty ? response.text : null;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI: $e');
      return _getOfflineAnswer(question);
    }
  }

  /// –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
  String _buildQuestionPrompt(String question, String category) {
    return '''
–¢—ã - –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≤–∞–π—à–Ω–∞–≤–∏–∑–º–∞, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –®—Ä–∏ –ß–∞–π—Ç–∞–Ω—å–∏ –ú–∞—Ö–∞–ø—Ä–∞–±—Ö—É.
–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–∑–∏—Ü–∏–∏ –≤–µ–¥–∏—á–µ—Å–∫–æ–π –º—É–¥—Ä–æ—Å—Ç–∏.

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: $category
–í–æ–ø—Ä–æ—Å: $question

–î–∞–π –º—É–¥—Ä—ã–π –∏ –¥—É—Ö–æ–≤–Ω–æ –≤–æ–∑–≤—ã—à–∞—é—â–∏–π –æ—Ç–≤–µ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞:
- –ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç–µ
- –®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º
- –£—á–µ–Ω–∏–∏ –®—Ä–∏ –ß–∞–π—Ç–∞–Ω—å–∏ –ú–∞—Ö–∞–ø—Ä–∞–±—Ö—É
- –¢—Ä–∞–¥–∏—Ü–∏–∏ –≤–∞–π—à–Ω–∞–≤–∏–∑–º–∞

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º.

–û—Ç–≤–µ—Ç:''';
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  String _getOfflineAnswer(String question) {
    return '''
AI –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–∂–∞–ø—ã
2. –ò–∑—É—á–∞–π—Ç–µ —Å–≤—è—â–µ–Ω–Ω—ã–µ –ø–∏—Å–∞–Ω–∏—è
3. –û–±—â–∞–π—Ç–µ—Å—å —Å –ø—Ä–µ–¥–∞–Ω–Ω—ã–º–∏
4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥—É—Ö–æ–≤–Ω–æ–º—É —É—á–∏—Ç–µ–ª—é

–•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞! üïâÔ∏è
''';
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  Future<void> _updateStatistics() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt('local_ai_mantras_sent', _mantrasSent);
      await prefs.setInt('local_ai_mantras_processed', _mantrasProcessed);
    } catch (e) {
      // silent
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  Future<Map<String, dynamic>> getStatistics() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final info = await _llama.getModelInfo();
      return {
        'mantrasSent': prefs.getInt('local_ai_mantras_sent') ?? 0,
        'mantrasProcessed': prefs.getInt('local_ai_mantras_processed') ?? 0,
        'isInitialized': _isInitialized,
        'isModelLoaded': _isModelLoaded,
        'modelPath': _modelPath,
        'modelInfo': info,
      };
    } catch (e) {
      return {};
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI
  bool get isAvailable => _isInitialized && _isModelLoaded;

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
  String? get modelPath => _modelPath;

  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  Future<void> dispose() async {
    try {
      await _llama.unloadModel();
      _isInitialized = false;
      _isModelLoaded = false;
      debugPrint('LocalAIService —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: $e');
    }
  }
}
