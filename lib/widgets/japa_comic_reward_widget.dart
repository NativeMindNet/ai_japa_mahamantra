import 'package:flutter/material.dart';
import '../models/mahabharata_comic.dart';
import '../services/mahabharata_service.dart';
import '../screens/mahabharata_comics_screen.dart';

/// –í–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–º–∏–∫—Å–æ–≤-–Ω–∞–≥—Ä–∞–¥ –ø–æ—Å–ª–µ –¥–∂–∞–ø—ã
/// –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∏–∫—Å—ã –ú–∞—Ö–∞–±—Ö–∞—Ä–∞—Ç—ã —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –¥–∂–∞–ø—ã
class JapaComicRewardWidget extends StatefulWidget {
  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—Ä—É–≥–æ–≤
  final int completedRounds;
  
  /// –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –±—É—Å–∏–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  final int? currentBead;
  
  /// Callback –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–≥—Ä–∞–¥—ã
  final VoidCallback? onDismiss;

  const JapaComicRewardWidget({
    super.key,
    required this.completedRounds,
    this.currentBead,
    this.onDismiss,
  });

  @override
  State<JapaComicRewardWidget> createState() => _JapaComicRewardWidgetState();
}

class _JapaComicRewardWidgetState extends State<JapaComicRewardWidget>
    with SingleTickerProviderStateMixin {
  final MahabharataService _service = MahabharataService.instance;
  List<MahabharataComic> _availableComics = [];
  bool _isLoading = true;
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _initAnimation();
    _loadRewardComics();
  }

  void _initAnimation() {
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _scaleAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.elasticOut,
    );
    
    _animationController.forward();
  }

  Future<void> _loadRewardComics() async {
    setState(() => _isLoading = true);
    
    try {
      await _service.initialize();
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏–∫—Å—ã-–Ω–∞–≥—Ä–∞–¥—ã
      final rewardComics = _service.getRewardComics(widget.completedRounds);
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –±—É—Å–∏–Ω–∞, —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏–∫—Å—ã –¥–ª—è —ç—Ç–æ–π –±—É—Å–∏–Ω—ã
      if (widget.currentBead != null) {
        final beadComics = _service.getComicsByJapaConnection(
          beadNumber: widget.currentBead,
        );
        rewardComics.addAll(beadComics);
      }
      
      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      final uniqueComics = <String, MahabharataComic>{};
      for (var comic in rewardComics) {
        uniqueComics[comic.id] = comic;
      }
      
      setState(() {
        _availableComics = uniqueComics.values.toList();
        _isLoading = false;
      });
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∏–∫—Å–æ–≤-–Ω–∞–≥—Ä–∞–¥: $e');
      setState(() => _isLoading = false);
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }
    
    if (_availableComics.isEmpty) {
      return const SizedBox.shrink();
    }
    
    return ScaleTransition(
      scale: _scaleAnimation,
      child: Dialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        child: Container(
          constraints: BoxConstraints(
            maxHeight: MediaQuery.of(context).size.height * 0.7,
            maxWidth: 400,
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // –ó–∞–≥–æ–ª–æ–≤–æ–∫
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.orange[700]!, Colors.orange[500]!],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(20),
                    topRight: Radius.circular(20),
                  ),
                ),
                child: Column(
                  children: [
                    const Icon(
                      Icons.auto_awesome,
                      color: Colors.white,
                      size: 48,
                    ),
                    const SizedBox(height: 12),
                    Text(
                      'üéâ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∞–∫—Ç–∏–∫—É!',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ ${widget.completedRounds} ${_getRoundWord(widget.completedRounds)}',
                      style: const TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
              
              // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤
              Flexible(
                child: ListView.builder(
                  shrinkWrap: true,
                  padding: const EdgeInsets.all(16),
                  itemCount: _availableComics.length,
                  itemBuilder: (context, index) {
                    final comic = _availableComics[index];
                    return _buildComicRewardCard(comic);
                  },
                ),
              ),
              
              // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
              Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                    Expanded(
                      child: OutlinedButton(
                        onPressed: () {
                          Navigator.pop(context);
                          widget.onDismiss?.call();
                        },
                        child: const Text('–ü–æ–∑–∂–µ'),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: _openComicsLibrary,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange[700],
                          foregroundColor: Colors.white,
                        ),
                        child: const Text('–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ'),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildComicRewardCard(MahabharataComic comic) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 2,
      child: InkWell(
        onTap: () => _openComicReader(comic),
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: Row(
            children: [
              // –ú–∏–Ω–∏–∞—Ç—é—Ä–∞
              Container(
                width: 60,
                height: 80,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  color: Colors.grey[300],
                ),
                child: comic.panels.isNotEmpty
                    ? ClipRRect(
                        borderRadius: BorderRadius.circular(8),
                        child: _buildThumbnail(comic.panels.first.imagePath),
                      )
                    : const Icon(Icons.image, color: Colors.grey),
              ),
              const SizedBox(width: 12),
              
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 6,
                            vertical: 2,
                          ),
                          decoration: BoxDecoration(
                            color: Colors.orange[100],
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(
                            'üÜï –ù–æ–≤—ã–π',
                            style: TextStyle(
                              fontSize: 10,
                              color: Colors.orange[900],
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          '–≠–ø–∏–∑–æ–¥ ${comic.episodeNumber}',
                          style: TextStyle(
                            fontSize: 11,
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      comic.title,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      comic.description,
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),
              
              // –ò–∫–æ–Ω–∫–∞
              Icon(
                Icons.chevron_right,
                color: Colors.grey[400],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildThumbnail(String imagePath) {
    if (imagePath.startsWith('assets/')) {
      return Image.asset(
        imagePath,
        fit: BoxFit.cover,
        errorBuilder: (context, error, stackTrace) {
          return const Icon(Icons.broken_image, color: Colors.grey);
        },
      );
    } else {
      return Image.file(
        File(imagePath),
        fit: BoxFit.cover,
        errorBuilder: (context, error, stackTrace) {
          return const Icon(Icons.broken_image, color: Colors.grey);
        },
      );
    }
  }

  void _openComicReader(MahabharataComic comic) {
    Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞–≥—Ä–∞–¥—ã
    
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ComicReaderScreen(comic: comic),
      ),
    );
    
    widget.onDismiss?.call();
  }

  void _openComicsLibrary() {
    Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞–≥—Ä–∞–¥—ã
    
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const MahabharataComicsScreen(),
      ),
    );
    
    widget.onDismiss?.call();
  }

  String _getRoundWord(int count) {
    if (count % 10 == 1 && count % 100 != 11) {
      return '–∫—Ä—É–≥';
    } else if ([2, 3, 4].contains(count % 10) && ![12, 13, 14].contains(count % 100)) {
      return '–∫—Ä—É–≥–∞';
    } else {
      return '–∫—Ä—É–≥–æ–≤';
    }
  }
}

import 'dart:io';

/// –§—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–º–∏–∫—Å–æ–≤-–Ω–∞–≥—Ä–∞–¥
Future<void> showJapaComicReward({
  required BuildContext context,
  required int completedRounds,
  int? currentBead,
  VoidCallback? onDismiss,
}) async {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∏–∫—Å—ã
  final service = MahabharataService.instance;
  await service.initialize();
  
  final rewardComics = service.getRewardComics(completedRounds);
  final beadComics = currentBead != null
      ? service.getComicsByJapaConnection(beadNumber: currentBead)
      : <MahabharataComic>[];
  
  final totalComics = {...rewardComics, ...beadComics}.length;
  
  if (totalComics == 0) {
    // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
  await showDialog(
    context: context,
    barrierDismissible: true,
    builder: (context) => JapaComicRewardWidget(
      completedRounds: completedRounds,
      currentBead: currentBead,
      onDismiss: onDismiss,
    ),
  );
}

