import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../constants/app_constants.dart';
import '../widgets/modern_ui_components.dart';

/// –î–µ—Ç–µ–∫—Ç–æ—Ä Easter Egg –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
/// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class EasterEggDetector extends StatefulWidget {
  final Widget child;
  final Function(String eggType)? onEasterEggTriggered;
  final bool enableVibration;
  final bool enableSound;

  const EasterEggDetector({
    super.key,
    required this.child,
    this.onEasterEggTriggered,
    this.enableVibration = true,
    this.enableSound = true,
  });

  @override
  State<EasterEggDetector> createState() => _EasterEggDetectorState();
}

class _EasterEggDetectorState extends State<EasterEggDetector> {
  // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö Easter Egg
  int _tripleTapCount = 0;
  int _longPressCount = 0;
  int _swipeCount = 0;
  int _shakeCount = 0;
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
  DateTime? _lastTripleTap;
  DateTime? _lastLongPress;
  DateTime? _lastSwipe;
  DateTime? _lastShake;
  
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Easter Egg
  static const int _tripleTapThreshold = 3;
  static const int _longPressThreshold = 5;
  static const int _swipeThreshold = 10;
  static const int _shakeThreshold = 7;
  
  // –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  static const int _resetTimeSeconds = 5;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: _handleTap,
      onLongPress: _handleLongPress,
      onPanUpdate: _handleSwipe,
      child: widget.child,
    );
  }

  void _handleTap() {
    final now = DateTime.now();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
    if (_lastTripleTap != null &&
        now.difference(_lastTripleTap!).inSeconds > _resetTimeSeconds) {
      _tripleTapCount = 0;
    }
    
    _tripleTapCount++;
    _lastTripleTap = now;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é Easter Egg
    if (_tripleTapCount >= _tripleTapThreshold) {
      _triggerEasterEgg('triple_tap');
      _tripleTapCount = 0;
    }
    
    _provideFeedback();
  }

  void _handleLongPress() {
    final now = DateTime.now();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
    if (_lastLongPress != null &&
        now.difference(_lastLongPress!).inSeconds > _resetTimeSeconds) {
      _longPressCount = 0;
    }
    
    _longPressCount++;
    _lastLongPress = now;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é Easter Egg
    if (_longPressCount >= _longPressThreshold) {
      _triggerEasterEgg('long_press');
      _longPressCount = 0;
    }
    
    _provideFeedback();
  }

  void _handleSwipe(DragUpdateDetails details) {
    final now = DateTime.now();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
    if (_lastSwipe != null &&
        now.difference(_lastSwipe!).inSeconds > _resetTimeSeconds) {
      _swipeCount = 0;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–≤–∞–π–ø (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
    final distance = details.delta.distance;
    if (distance > 10) {
      _swipeCount++;
      _lastSwipe = now;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é Easter Egg
      if (_swipeCount >= _swipeThreshold) {
        _triggerEasterEgg('swipe');
        _swipeCount = 0;
      }
      
      _provideFeedback();
    }
  }


  void _triggerEasterEgg(String eggType) {
    // –í—ã–∑—ã–≤–∞–µ–º callback
    widget.onEasterEggTriggered?.call(eggType);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    _showEasterEggNotification(eggType);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è Easter Egg
    if (widget.enableVibration) {
      HapticFeedback.heavyImpact();
    }
    
    // –ó–≤—É–∫ Easter Egg
    if (widget.enableSound) {
      HapticFeedback.mediumImpact();
    }
  }

  void _showEasterEggNotification(String eggType) {
    final message = _getEasterEggMessage(eggType);
    
    ModernUIComponents.showSnackBar(
      context: context,
      message: message,
      backgroundColor: const Color(AppConstants.accentColor),
      textColor: Colors.white,
      icon: Icons.celebration,
      duration: const Duration(seconds: 4),
    );
  }

  String _getEasterEggMessage(String eggType) {
    switch (eggType) {
      case 'triple_tap':
        return 'üê£ Easter Egg –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢—Ä–æ–π–Ω–æ–π —Ç–∞–ø –æ–±–Ω–∞—Ä—É–∂–µ–Ω!';
      case 'long_press':
        return 'üê£ Easter Egg –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!';
      case 'swipe':
        return 'üê£ Easter Egg –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–≤–∞–π–ø—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!';
      case 'shake':
        return 'üê£ Easter Egg –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!';
      default:
        return 'üê£ Easter Egg –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!';
    }
  }

  void _provideFeedback() {
    // –õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (widget.enableVibration) {
      HapticFeedback.lightImpact();
    }
    
    // –ó–≤—É–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (widget.enableSound) {
      HapticFeedback.selectionClick();
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
  Map<String, dynamic> getStatistics() {
    return {
      'triple_tap_count': _tripleTapCount,
      'long_press_count': _longPressCount,
      'swipe_count': _swipeCount,
      'shake_count': _shakeCount,
      'last_triple_tap': _lastTripleTap?.toIso8601String(),
      'last_long_press': _lastLongPress?.toIso8601String(),
      'last_swipe': _lastSwipe?.toIso8601String(),
      'last_shake': _lastShake?.toIso8601String(),
    };
  }

  /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
  void resetCounters() {
    setState(() {
      _tripleTapCount = 0;
      _longPressCount = 0;
      _swipeCount = 0;
      _shakeCount = 0;
      _lastTripleTap = null;
      _lastLongPress = null;
      _lastSwipe = null;
      _lastShake = null;
    });
  }
}

/// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π Easter Egg –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –±—É—Å–∏–Ω—ã
class BeadEasterEggDetector extends StatefulWidget {
  final Widget child;
  final Function()? onEasterEggTriggered;
  final int targetBeadNumber;
  final int requiredTaps;

  const BeadEasterEggDetector({
    super.key,
    required this.child,
    this.onEasterEggTriggered,
    this.targetBeadNumber = 108,
    this.requiredTaps = 3,
  });

  @override
  State<BeadEasterEggDetector> createState() => _BeadEasterEggDetectorState();
}

class _BeadEasterEggDetectorState extends State<BeadEasterEggDetector> {
  int _tapCount = 0;
  DateTime? _lastTap;
  static const int _resetTimeSeconds = 2;

  void _handleBeadTap(int beadNumber) {
    if (beadNumber != widget.targetBeadNumber) {
      _resetTapCount();
      return;
    }

    final now = DateTime.now();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
    if (_lastTap != null &&
        now.difference(_lastTap!).inSeconds > _resetTimeSeconds) {
      _tapCount = 0;
    }
    
    _tapCount++;
    _lastTap = now;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é Easter Egg
    if (_tapCount >= widget.requiredTaps) {
      _triggerEasterEgg();
      _resetTapCount();
    }
  }

  void _triggerEasterEgg() {
    // –í—ã–∑—ã–≤–∞–µ–º callback
    widget.onEasterEggTriggered?.call();
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    HapticFeedback.heavyImpact();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (mounted) {
      ModernUIComponents.showSnackBar(
        context: context,
        message: 'üê£ Easter Egg –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢—Ä–æ–π–Ω–æ–π —Ç–∞–ø –Ω–∞ –±—É—Å–∏–Ω–µ ${widget.targetBeadNumber}!',
        backgroundColor: const Color(AppConstants.accentColor),
        textColor: Colors.white,
        icon: Icons.celebration,
        duration: const Duration(seconds: 4),
      );
    }
  }

  void _resetTapCount() {
    setState(() {
      _tapCount = 0;
      _lastTap = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => _handleBeadTap(widget.targetBeadNumber),
      child: widget.child,
    );
  }
}

/// –î–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
class ShakeDetector extends StatefulWidget {
  final Widget child;
  final Function()? onShakeDetected;
  final double shakeThreshold;
  final Duration debounceTime;

  const ShakeDetector({
    super.key,
    required this.child,
    this.onShakeDetected,
    this.shakeThreshold = 2.0,
    this.debounceTime = const Duration(milliseconds: 500),
  });

  @override
  State<ShakeDetector> createState() => _ShakeDetectorState();
}

class _ShakeDetectorState extends State<ShakeDetector> {
  DateTime? _lastShakeTime;
  double _lastX = 0;
  double _lastY = 0;
  double _lastZ = 0;


  @override
  Widget build(BuildContext context) {
    return widget.child;
  }
}

/// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ Easter Egg
class UniversalEasterEggDetector extends StatefulWidget {
  final Widget child;
  final Function(String eggType)? onEasterEggTriggered;

  const UniversalEasterEggDetector({
    super.key,
    required this.child,
    this.onEasterEggTriggered,
  });

  @override
  State<UniversalEasterEggDetector> createState() => _UniversalEasterEggDetectorState();
}

class _UniversalEasterEggDetectorState extends State<UniversalEasterEggDetector> {
  @override
  Widget build(BuildContext context) {
    return EasterEggDetector(
      onEasterEggTriggered: widget.onEasterEggTriggered,
      child: ShakeDetector(
        onShakeDetected: () {
          widget.onEasterEggTriggered?.call('shake');
        },
        child: widget.child,
      ),
    );
  }
}