import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:battery_plus/battery_plus.dart';
import 'package:wakelock_plus/wakelock_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:vibration/vibration.dart';
import 'encrypted_log_service.dart';
import 'mozgach108_service.dart';
import 'ai_power_mode_service.dart';
import 'notification_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ –∏ –Ω–∞ –∑–∞—Ä—è–¥–∫–µ
/// –†–µ–∞–ª–∏–∑—É–µ—Ç –ü—Ä–∞–≤–∏–ª–æ ‚Ññ 4: –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –¥–ª—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
///
/// –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
/// - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞—Ä—è–¥–∫–∏
/// - –í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏ —Å–ø—è—â–µ–º —ç–∫—Ä–∞–Ω–µ
/// - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥
/// - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π –∏–ª–∏ Low Power —Ä–µ–∂–∏–º–∞
class ChargingChantingService {
  static ChargingChantingService? _instance;

  bool _isInitialized = false;
  bool _isChanting = false;
  bool _isCharging = false;
  int _batteryLevel = 100;

  final Battery _battery = Battery();
  StreamSubscription<BatteryState>? _batteryStateSubscription;
  Timer? _chantingTimer;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  bool _enableOnCharging = true;
  bool _enableInSleepMode = false;
  bool _useAIModels = true;
  int _chantingIntervalSeconds = 30; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è–º–∏

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  int _totalChants = 0;
  int _chantsDuringCharging = 0;
  int _chantsDuringSleep = 0;
  DateTime? _lastChantTime;
  DateTime? _chargingStartTime;

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  static const String _mahamantra =
      "–•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞ –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞ –ö—Ä–∏—à–Ω–∞ –ö—Ä–∏—à–Ω–∞ –•–∞—Ä–µ –•–∞—Ä–µ–π –•–∞—Ä–µ –†–∞–º–∞ –•–∞—Ä–µ –†–∞–º–∞ –†–∞–º–∞ –†–∞–º–∞ –•–∞—Ä–µ–π –•–∞—Ä–µ";

  ChargingChantingService._();

  /// –ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
  static ChargingChantingService get instance {
    _instance ??= ChargingChantingService._();
    return _instance!;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<bool> initialize() async {
    if (_isInitialized) return true;

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      await _loadSettings();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      await EncryptedLogService.instance.initialize();
      await AIPowerModeService.instance.initialize();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
      await _checkBatteryState();

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
      _subscribeToBatteryState();

      _isInitialized = true;
      debugPrint('ChargingChantingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      return true;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChargingChantingService: $e');
      return false;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences
  Future<void> _loadSettings() async {
    final prefs = await SharedPreferences.getInstance();

    _enableOnCharging = prefs.getBool('charging_chanting_enabled') ?? true;
    _enableInSleepMode = prefs.getBool('sleep_chanting_enabled') ?? false;
    _useAIModels = prefs.getBool('charging_use_ai') ?? true;
    _chantingIntervalSeconds = prefs.getInt('chanting_interval_seconds') ?? 30;

    _totalChants = prefs.getInt('total_chants') ?? 0;
    _chantsDuringCharging = prefs.getInt('chants_during_charging') ?? 0;
    _chantsDuringSleep = prefs.getInt('chants_during_sleep') ?? 0;

    final lastChantStr = prefs.getString('last_chant_time');
    if (lastChantStr != null) {
      _lastChantTime = DateTime.parse(lastChantStr);
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ SharedPreferences
  Future<void> _saveSettings() async {
    final prefs = await SharedPreferences.getInstance();

    await prefs.setBool('charging_chanting_enabled', _enableOnCharging);
    await prefs.setBool('sleep_chanting_enabled', _enableInSleepMode);
    await prefs.setBool('charging_use_ai', _useAIModels);
    await prefs.setInt('chanting_interval_seconds', _chantingIntervalSeconds);

    await prefs.setInt('total_chants', _totalChants);
    await prefs.setInt('chants_during_charging', _chantsDuringCharging);
    await prefs.setInt('chants_during_sleep', _chantsDuringSleep);

    if (_lastChantTime != null) {
      await prefs.setString(
        'last_chant_time',
        _lastChantTime!.toIso8601String(),
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
  Future<void> _checkBatteryState() async {
    try {
      final batteryState = await _battery.batteryState;
      _batteryLevel = await _battery.batteryLevel;

      _isCharging =
          batteryState == BatteryState.charging ||
          batteryState == BatteryState.full;

      debugPrint(
        '–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏: ${batteryState.name}, —É—Ä–æ–≤–µ–Ω—å: $_batteryLevel%',
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è
      await _updateChantingState();
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏: $e');
    }
  }

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
  void _subscribeToBatteryState() {
    _batteryStateSubscription = _battery.onBatteryStateChanged.listen((
      BatteryState state,
    ) async {
      debugPrint('–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${state.name}');

      final wasCharging = _isCharging;
      _isCharging =
          state == BatteryState.charging || state == BatteryState.full;

      if (_isCharging && !wasCharging) {
        // –ó–∞—Ä—è–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
        _chargingStartTime = DateTime.now();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (_enableOnCharging) {
          await NotificationService.showJapaReminder(
            title: 'üîã –ó–∞—Ä—è–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å - –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
            body:
                '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –∑–∞—Ä—è–¥–∫–µ. –ú–∞—Ö–∞–º–∞–Ω—Ç—Ä–∞ –±—É–¥–µ—Ç –≤–æ—Å–ø–µ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!',
            payload: 'charging_chanting_started',
          );
        }
      } else if (!_isCharging && wasCharging) {
        // –ó–∞—Ä—è–¥–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        final chargingDuration = _chargingStartTime != null
            ? DateTime.now().difference(_chargingStartTime!)
            : Duration.zero;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if (_enableOnCharging && _chargingStartTime != null) {
          await NotificationService.showJapaReminder(
            title: 'üîã –ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            body:
                '–í—Ä–µ–º—è –Ω–∞ –∑–∞—Ä—è–¥–∫–µ: ${chargingDuration.inMinutes} –º–∏–Ω. '
                '–í–æ—Å–ø–µ–≤–∞–Ω–æ –º–∞–Ω—Ç—Ä: $_chantsDuringCharging. –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!',
            payload: 'charging_chanting_ended',
          );
        }

        _chargingStartTime = null;
      }

      await _updateChantingState();
    });
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è
  Future<void> _updateChantingState() async {
    final shouldChant =
        (_enableOnCharging && _isCharging) || _enableInSleepMode;

    if (shouldChant && !_isChanting) {
      await _startChanting();
    } else if (!shouldChant && _isChanting) {
      await _stopChanting();
    }
  }

  /// –ù–∞—á–∞—Ç—å –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ
  Future<void> _startChanting() async {
    if (_isChanting) return;

    _isChanting = true;

    try {
      // –í–∫–ª—é—á–∞–µ–º wakelock –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ "Keep screen on" –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
      await WakelockPlus.enable();
      debugPrint('Wakelock –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—ã–ø–∞—Ç—å');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ
      _chantingTimer = Timer.periodic(
        Duration(seconds: _chantingIntervalSeconds),
        (_) => _performChant(),
      );

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ —Å—Ä–∞–∑—É
      await _performChant();

      debugPrint(
        '–í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å (–∏–Ω—Ç–µ—Ä–≤–∞–ª: $_chantingIntervalSeconds —Å–µ–∫)',
      );
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è: $e');
      _isChanting = false;
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ
  Future<void> _stopChanting() async {
    if (!_isChanting) return;

    _isChanting = false;

    try {
      // –û—Ç–∫–ª—é—á–∞–µ–º wakelock
      await WakelockPlus.disable();
      debugPrint('Wakelock –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      _chantingTimer?.cancel();
      _chantingTimer = null;

      debugPrint('–í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è: $e');
    }
  }

  /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ
  Future<void> _performChant() async {
    try {
      final startTime = DateTime.now();
      _lastChantTime = startTime;

      String result;

      if (_useAIModels) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –º–æ–¥–µ–ª–∏ (High Power Mode)
        final aiService = AIPowerModeService.instance;
        final isHighPowerMode = aiService.isAcceleratorAvailable;

        if (isHighPowerMode) {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ú–æ–∑g–∞—á108
          final mozgachService = Mozgach108Service.instance;

          try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ 108 –º–æ–¥–µ–ª–µ–π
            await mozgachService.processMantraThroughAll108Models(
              mantra: _mahamantra,
              beadNumber: _totalChants % 108,
              roundNumber: (_totalChants / 108).floor() + 1,
            );
            result = 'AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ 108 –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
          } catch (e) {
            debugPrint('–û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: $e');
            result = await _simpleLowPowerChant();
          }
        } else {
          // Low Power Mode - –ø—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è
          result = await _simpleLowPowerChant();
        }
      } else {
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Low Power Mode
        result = await _simpleLowPowerChant();
      }

      final endTime = DateTime.now();
      final duration = endTime.difference(startTime);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      _totalChants++;
      if (_isCharging) {
        _chantsDuringCharging++;
      }
      if (_enableInSleepMode) {
        _chantsDuringSleep++;
      }

      await _saveSettings();

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥
      await _logChantResult(result, duration, startTime);

      // –õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
      if (await Vibration.hasVibrator() == true) {
        Vibration.vibrate(duration: 50);
      }

      debugPrint(
        '–í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ #$_totalChants (${duration.inMilliseconds}ms)',
      );
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è: $e');
    }
  }

  /// –ü—Ä–æ—Å—Ç–æ–µ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –≤ Low Power —Ä–µ–∂–∏–º–µ (–∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫)
  Future<String> _simpleLowPowerChant() async {
    final buffer = StringBuffer();
    buffer.writeln('=== Low Power –†–µ–∂–∏–º –í–æ—Å–ø–µ–≤–∞–Ω–∏—è ===');
    buffer.writeln('–í—Ä–µ–º—è: ${DateTime.now().toIso8601String()}');
    buffer.writeln('–†–µ–∂–∏–º: ${_isCharging ? "–ù–∞ –∑–∞—Ä—è–¥–∫–µ" : "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º"}');
    buffer.writeln('–ë–∞—Ç–∞—Ä–µ—è: $_batteryLevel%');
    buffer.writeln();
    buffer.writeln(_mahamantra);
    buffer.writeln();
    buffer.writeln('–•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞! üïâÔ∏è');

    return buffer.toString();
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è
  Future<void> _logChantResult(
    String result,
    Duration duration,
    DateTime timestamp,
  ) async {
    try {
      final metadata = {
        'duration_ms': duration.inMilliseconds,
        'is_charging': _isCharging,
        'battery_level': _batteryLevel,
        'total_chants': _totalChants,
        'chants_during_charging': _chantsDuringCharging,
        'mode': _useAIModels ? 'AI' : 'Low Power',
      };

      await EncryptedLogService.instance.addLogEntry(
        logType: 'charging_chanting',
        message: result,
        metadata: metadata,
      );
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è: $e');
    }
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞—Ä—è–¥–∫–µ
  Future<void> setChargingChantingEnabled(bool enabled) async {
    _enableOnCharging = enabled;
    await _saveSettings();
    await _updateChantingState();

    debugPrint('–í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞—Ä—è–¥–∫–µ: ${enabled ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–æ—Ç–∫–ª—é—á–µ–Ω–æ"}');
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
  Future<void> setSleepChantingEnabled(bool enabled) async {
    _enableInSleepMode = enabled;
    await _saveSettings();
    await _updateChantingState();

    debugPrint(
      '–í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: ${enabled ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–æ—Ç–∫–ª—é—á–µ–Ω–æ"}',
    );
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π
  Future<void> setUseAIModels(bool useAI) async {
    _useAIModels = useAI;
    await _saveSettings();

    debugPrint('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π: ${useAI ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–æ—Ç–∫–ª—é—á–µ–Ω–æ"}');
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  Future<void> setChantingInterval(int seconds) async {
    if (seconds < 10) seconds = 10; // –ú–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
    if (seconds > 3600) seconds = 3600; // –ú–∞–∫—Å–∏–º—É–º 1 —á–∞—Å

    _chantingIntervalSeconds = seconds;
    await _saveSettings();

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    if (_isChanting) {
      await _stopChanting();
      await _startChanting();
    }

    debugPrint('–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $seconds —Å–µ–∫—É–Ω–¥');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Å–ø–µ–≤–∞–Ω–∏—è
  Map<String, dynamic> getStatistics() {
    return {
      'is_initialized': _isInitialized,
      'is_chanting': _isChanting,
      'is_charging': _isCharging,
      'battery_level': _batteryLevel,
      'enable_on_charging': _enableOnCharging,
      'enable_in_sleep': _enableInSleepMode,
      'use_ai_models': _useAIModels,
      'interval_seconds': _chantingIntervalSeconds,
      'total_chants': _totalChants,
      'chants_during_charging': _chantsDuringCharging,
      'chants_during_sleep': _chantsDuringSleep,
      'last_chant_time': _lastChantTime?.toIso8601String(),
      'charging_start_time': _chargingStartTime?.toIso8601String(),
    };
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
  String getStatus() {
    if (!_isInitialized) return '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';
    if (_isChanting && _isCharging) return '–í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞—Ä—è–¥–∫–µ';
    if (_isChanting) return '–í–æ—Å–ø–µ–≤–∞–Ω–∏–µ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ';
    if (_isCharging) return '–ù–∞ –∑–∞—Ä—è–¥–∫–µ (–≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)';
    return '–û–∂–∏–¥–∞–Ω–∏–µ';
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–µ
  bool get isChanting => _isChanting;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–¥–µ—Ç –ª–∏ –∑–∞—Ä—è–¥–∫–∞
  bool get isCharging => _isCharging;

  /// –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏
  int get batteryLevel => _batteryLevel;

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–µ–≤–∞–Ω–∏–π
  int get totalChants => _totalChants;

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    await _stopChanting();
    await _batteryStateSubscription?.cancel();
    _batteryStateSubscription = null;
    _isInitialized = false;

    debugPrint('ChargingChantingService –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
  }
}
